from flask import Flask, render_template, Response
import RPi.GPIO as GPIO
import cv2
import dlib
from scipy.spatial import distance as dist
import time

app = Flask(__name__)

# GPIO setup
GPIO.setmode(GPIO.BCM)
BUZZER_PIN = 17
ALCOHOL_SENSOR_PIN = 18
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(ALCOHOL_SENSOR_PIN, GPIO.IN)

def buzz_alert(state):
    GPIO.output(BUZZER_PIN, state)

# Dlib setup
EAR_THRESHOLD = 0.3
CLOSED_EYES_DURATION = 5  # seconds
last_closed_time = None
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

(left_eye_start, left_eye_end) = (42, 48)
(right_eye_start, right_eye_end) = (36, 42)

def eye_aspect_ratio(eye):
    A = dist.euclidean(eye[1], eye[5])
    B = dist.euclidean(eye[2], eye[4])
    C = dist.euclidean(eye[0], eye[3])
    return (A + B) / (2.0 * C)

def get_alcohol_level():
    return GPIO.input(ALCOHOL_SENSOR_PIN)  # 1 = Alcohol detected, 0 = No alcohol

def gen():
    global last_closed_time
    cap = cv2.VideoCapture(0)
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = detector(gray)

        drowsy = False
        alcohol_detected = get_alcohol_level()

        for face in faces:
            landmarks = predictor(gray, face)
            landmarks = [(landmarks.part(i).x, landmarks.part(i).y) for i in range(68)]

            left_eye = landmarks[left_eye_start:left_eye_end]
            right_eye = landmarks[right_eye_start:right_eye_end]

            left_ear = eye_aspect_ratio(left_eye)
            right_ear = eye_aspect_ratio(right_eye)
            ear = (left_ear + right_ear) / 2.0

            # Handle eye closure logic for drowsiness detection
            if ear < EAR_THRESHOLD:
                if last_closed_time is None:
                    last_closed_time = time.time()
                elif time.time() - last_closed_time > CLOSED_EYES_DURATION:
                    drowsy = True
                    buzz_alert(True)  # Trigger buzzer when drowsy
            else:
                last_closed_time = None
                buzz_alert(False)  # Turn off buzzer when eyes open

            for (x, y) in left_eye + right_eye:
                cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)

        # Alcohol detection buzzer logic (only triggers if alcohol is detected)
        if alcohol_detected:
            buzz_alert(True)
            time.sleep(0.5)
            buzz_alert(False)

        # Display alcohol level and drowsiness on frame
        cv2.putText(frame, f"Alcohol Level: {alcohol_detected}",
                    (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255) if alcohol_detected else (0, 255, 0), 2)
        cv2.putText(frame, f"Drowsy: {'Yes' if drowsy else 'No'}",
                    (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255) if drowsy else (0, 255, 0), 2)

        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
        yield (b'--frame\r\n'
               b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')

    cap.release()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/video_feed')
def video_feed():
    return Response(gen(), mimetype='multipart/x-mixed-replace; boundary=frame')

if __name__ == '__main__':
    try:
        app.run(host='0.0.0.0', port=5000, debug=False)
    except KeyboardInterrupt:
        GPIO.cleanup()
